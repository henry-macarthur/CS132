CHAPTER 3: LL Parsing 
---------------------
BNF
===
    1. nonterminals with angle brackets or capital letters 
    2. terminals with typewriter font or underline 
    3. productions as in the example 

Scanning V Parsing 
==================
    Regualr expressions used to classify: 
        identifiers, #, keywords 
        REs are more concise and simpler for tokens than a grammer 
        more efficient scanners can be built 
    CFG used to count: 
        brackets: (), begin...end, if...then....else 
    
The process of discovering a derivation is called parsing 
    * we will want to discover a left most derivation 
    * match the left most non term first 


Precedence 
==========
    * dont just group everything into the same rule 
    * make different rules build from other rules 
    * i.e. to use B u have to use A first 

Ambiguity
=========
    * if a grammar has more than one derivation for a single form than it is ambiguous 
    * if it has 2 derivations this ambiguity is purley grammatical 
        * context free ambiguity 

grammars have their limitations, we have to use semantic checker to solve a lot of our issues 

parsing: if a sequence of stuff can be generated by the grammar 

TOP DOWN: 
========= 
    * start at the root of derivation tree and fill in 
    * picks a production and tries to match the input 
    * may need backtracking 
    * some grammars are backtrack-free (predictive)
    * build up step by step 
    * build from root --> leaves 

BOTTOM-UP: -> learn later, more powerful 
==========
    * start at the leaves and fill in 
    * start in a state valid for legal first tokens 
    * as input is consumed, changed state to encode possibilities 
        recognize valid prefixes 
    * use a stack to store both state and sentential form 


Top-Down Parsing:
=================
    * allowing backtracking threatens linear time !!
        * want to do constant amount if work for each token 
    * starts with the root of the parse tree, labelled with the start or goal symbol of the grammar 
    * to build a parse we repeat following steps till we get fringe matching input 
        * at node labelled A, select a -> idk and construct each child for idk 
        * when a terminal is added to the fringe hat doesnt match the input we backtrack 
        * find the next node to be expanded 

    * if parser makes the wrong chouces, expansion doesnt terminate which is bad 

Left-recursion 
==============
    * need to get rid of this since top down parsers cannot handle it 

Lookahead?
==========
* LL1: scan left to right, left most derivation, 1 token lookahead 
* LR2: left to right scan right most derivation, 1-token lookahead 


Predictive Parsing 
==================
* basic idea 
    * for any two productions A -> a | b we would like a distinct 
        way of choosing the correct production to expand 
* key property: 
    whenever two productions A -> a and A -> b both appear in the grammar we would liked 
        FIRST(a) INTERSECT FIRST(B) = empty 
            we want productions to be distinct 
        * this would allow the parser to make a correct choice with a lookahead of only one symbol 

LEft Factoring 
==============
    * what if a grammar does not have this property? 
        sometimes we can transform a grammar to have this property 
    
    For each non terminal A find the longest prefix a common to two or more of its 
    alternatives 

    if a != epsilon then replace all of the A productions A -> aB1 | aB2 | ... | aBn 
    with 
        A -> aA' 
        A' -> B1 | B2 ... | Bn 
    where A' is a new non-term 

    Repeat until no two alternatives for a single non terminal have a common prefix 


there is no implementation that will take a grammar and produce what we want 

given a CFG that doesnt meet our condtions, it is undecidable whether an equiv grammar exists that does meet 
our conditions 


Recursive Descent parsing -> produce a simple recursivs descent parser from right assoc grammar 
=========================
 * now we can produce a simple recursive descent parser from the right assoc grammar 
 * descending down into the syntax tree 
    * building the tree along the way with recursive tree 
* we look at one token at a time   
    * always call next token, never previous 
        
Nullable 
========
* for a string a of grammar symbols, define NULLABLE(a) as a can go to epsilon 
* Nullable(a) iff a => * epsilon 

How to compute NULLABLE(U) for U exists in Vt U Vn 
    1. for each U let nullable(U) be a Boolean vriable 
    2. derive the following constraints: 
        2.1 if a exists Vt 
            nullable(a) = false 
        2.2 if A -> Y1 .... Yk is a production 
            ...


FIRST
=====
    For a string a of grammar symbols, define FIRST(a) as the set of terminal symbols that begin strings
    derived from a 

    First(a) = {a element Vt | a => *ab}

    How to compute First(U) for U exists Vt U Vn 
        1. for each U, let FIRST(U) be a set variable 
            like a first set we wanna know 
        2. derive 
            2.1 if a exists Vt 
                First(a) = {a}
            2.2 If A => Y1Y2..Yk is a prod 
                First(Y1) <= FIRST(A) 
                for all i : 1 < i <= k, if nullable (y1 ... yi-1) then 
                FIRST*Yi) <= FIRST(A) 
        3. solve the constraints, go for the <= least solution 
            find the smallest set 


FOLLOW 
======
    * for non terminal 

    if we have a non term B 
        what comes after it? 

    Follow(B) = { a element Vt | G -> * aBb ^ a exists FIRST(b$)}
        take the first set of beta followed by EOF 
        a is the first set after beta 
    
    How to computer FOLLOW(B)

    1. fior each non term B, let follow(b) be a set var 
    2. derive the following constraints 
        2.1 if G is the start symbol and $ is theEOF then 
            {$} <= FOLLOw(G)
        2.2 A->aBb is a production 
            FIRST(b) <= FOLLOW(B)
            if Nullable(B), then 
                FOLLOw(A) <= FOLLOw(B)
    3. solve the constraints, go for the <= least solution 

    if we have an epsilon case we can use the follow set 


LL1 grammars 
============
intuition: 
    A grammar G is LL1 iff for ann non terms A, each distinct pair of productions 
    A -> b 
    a -> g 
    check that the first sets are disjoint 

    ? what if nullable(A)?

    DEF: a grammar G is LL1 iff for each set of prods A -> a1 | a2 | .. | an 
        1. FIRST(a1), first(a1) ... are all pairwise disjoint 
        2. need followset of A to be disjoint 
            if nullable(ai) then for all h such that 1 <= j <- n ^ j i: 
                first(aj) INTERSECT FOLLOW(A) = EMPTY 
        
LL1 
=== 
    1. no nect recursive is ll1 
    2. no ambiguous grammar is ll1 
    3. some languages have no LL1 
    4. A ε–free grammar where each alternative expansion for A begins with a distinct terminal is a simple LL(1) grammar.